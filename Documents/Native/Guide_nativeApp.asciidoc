Main Header
===========
:Version-1dight: 3
:Version-2dight: 1
:Version-3dight: 0
:Version-description: _beta_03_stage

== AMoAdネイティブ広告 SDK Guide for Android

=== 1.サポート対象
Android OS 2.3.3（API Level 10）以上がサポート対象です。

=== 2.Google Player Servicesの組み込み(Eclipse版)
.Eclipse以外はGoogleドキュメントを参考してください
[NOTE]
http://developer.android.com/google/play-services/setup.html[Setting Up Google Play Services]

. Google Playe Services SDKをインストールする
.. window > Android SDK Managerを選択してAndroid SDK Managerを選択する
[TIP]
image:images/menu_android_sdk_manager.png[width="200px"]
.. Google Play Services項目をチェックしてインストールする
[TIP]
image:images/android_sdk_manager.png[width="200px"]

. Google Playe Services SDKをインポートする
.. File > Import... を選択する
[TIP]
image:images/menu_import.png[width="200px"]
.. 「Android > Existing Android Code Into Workspace」を選択する
[TIP]
image:images/import_panel.png[width="300px"]
.. 「ANDROID_HOME/extras/google/google_play_services/libproject/google-play-services_lib/」をインポートする
[TIP]
image:images/import_apply.png[width="300px"]

. Google Playe Services SDKをライブラリに追加する
.. ProjectのPropertiesを開く
[TIP]
image:images/add_google_play_services.png[width="300px"]
.. 「add」ボタンをクリックして「google-play-services_lib」を選択する
.. 「ok」ボタンをクリックする


=== 3.AMoAd SDKの組み込み
プロジェクト内のlibsフォルダに__AMoAd_{Version-1dight}_{Version-2dight}_{Version-3dight}{Version-description}.jar__を追加します。
[TIP]
image:images/add_jar.png[width="200px"]

=== 4.マニフェスト設定

. &lt;uses-permission android:name="android.permission.INTERNET"/&gt;を追加する

. &lt;meta-data ... /&gt;を追加する

```xml:AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest ...>
    ...
    <uses-permission android:name="android.permission.INTERNET" />
    ...
    <application ...>
        ...
        <meta-data
            android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version" />

        ...
    </application>
</manifest>
```
=== 5.ネイティブ広告の導入
表示広告種類は、画像の有無、テキストの長さなどによって、以下の3タイプあります

.ネイティブ広告の種類
[options="header"]
|===
|広告枠フォーマット |表示広告種類
.3+|ネイティブ型
.1+|一行テキスト
.1+|アイコン画像＋テキスト
.1+|メイン画像＋テキスト
|===

=== 5.1.広告用のレイアウト作成
.下記表を参考にレイアウトを作成する
[options="header"]
|=======================
| パターン | オブジェクト | クラス | タグ名（android:tag）
| アイコン画像＋テキスト | アイコン画像 | ImageView | AMoAdNativeViewIconImage
| メイン画像＋テキスト | メイン画像 | ImageView | AMoAdNativeViewMainImage
| 共通 | タイトルショート | TextView | AMoAdNativeViewTitleShort
| 共通 | タイトルロング | TextView | AMoAdNativeViewTitleLong
| 共通 | サービス名 | TextView | AMoAdNativeViewServiceName
|=======================

.一行テキスト広告のサンプル
```xml:native_text.xml
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="horizontal"
    android:padding="5dp" >

    <TextView
        android:id="@+id/TitleShort"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentLeft="true"
        android:layout_centerVertical="true"
        android:layout_toLeftOf="@+id/ServiceName"
        android:ellipsize="end"
        android:singleLine="true"
        android:tag="AMoAdNativeViewTitleShort"/>

    <TextView
        android:id="@+id/ServiceName"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentRight="true"
        android:layout_centerVertical="true"
        android:layout_marginLeft="10dp"
        android:ellipsize="end"
        android:singleLine="true"
        android:tag="AMoAdNativeViewServiceName"/>

</RelativeLayout>
```

.アイコン画像+テキスト広告のサンプル
```xml:native_icon.xml
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="5dp" >

    <ImageView
        android:id="@+id/IconImage"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:scaleType="fitXY"
        android:tag="AMoAdNativeViewIconImage" />

    <TextView
        android:id="@+id/TitleShort"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentTop="true"
        android:layout_marginLeft="5dp"
        android:layout_toRightOf="@+id/IconImage"
        android:ellipsize="end"
        android:singleLine="true"
        android:tag="AMoAdNativeViewTitleShort"/>

    <TextView
        android:id="@+id/TitleLong"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/TitleShort"
        android:layout_marginLeft="5dp"
        android:layout_toRightOf="@+id/IconImage"
        android:ellipsize="end"
        android:singleLine="true"
        android:tag="AMoAdNativeViewTitleLong"/>

    <TextView
        android:id="@+id/ServiceName"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/TitleLong"
        android:layout_marginLeft="5dp"
        android:layout_toRightOf="@+id/IconImage"
        android:ellipsize="end"
        android:tag="AMoAdNativeViewServiceName"/>

</RelativeLayout>
```

.メイン画像+テキスト広告のサンプル
```xml:native_image.xml
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="5dp" >

    <ImageView
        android:id="@+id/IconImage"
        android:layout_width="20dp"
        android:layout_height="20dp"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:scaleType="fitXY"
        android:tag="AMoAdNativeViewIconImage" />

    <TextView
        android:id="@+id/ServiceName"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentTop="true"
        android:layout_marginLeft="5dp"
        android:layout_toRightOf="@+id/IconImage"
        android:ellipsize="end"
        android:tag="AMoAdNativeViewServiceName"/>

    <ImageView
        android:id="@+id/MainImage"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@+id/IconImage"
        android:layout_marginTop="5dp"
        android:scaleType="fitXY"
        android:tag="AMoAdNativeViewMainImage" />

    <TextView
        android:id="@+id/TitleShort"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/MainImage"
        android:layout_marginTop="5dp"
        android:ellipsize="end"
        android:singleLine="true"
        android:tag="AMoAdNativeViewTitleShort"/>

    <TextView
        android:id="@+id/TitleLong"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/TitleShort"
        android:ellipsize="end"
        android:singleLine="true"
        android:tag="AMoAdNativeViewTitleLong"/>

</RelativeLayout>
```

=== 5.2.ネイティブ型広告の表示

.一行テキスト広告の実装
```java:MainActivity.java
@Override
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);

  AMoAdNativeViewManager.getInstance(this).prepareAd(SID, TAG);

  View adView = AMoAdNativeViewManager.getInstance(this).createView(SID, TAG, R.layout.native_text);

  ViewGroup vg = (ViewGroup) findViewById(R.id.top);
  vg.addView(adView);
}
```

.SIDとは
[TIP]
管理画面で広告枠を作成したときに発行されるIDです。
SDKの機能を呼び出すために複数の箇所から参照しますので、
文字列定数などに保持しておくことをお勧めします。

.TAGとは
[TIP]
同一SIDで複数の広告を表示するための識別IDです。 +
SID + TAG1、SID + TAG2で分けて使うことで同じ広告が表示されることを避けます。

.アイコン画像+テキスト広告の実装
```java:MainActivity.java
@Override
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);

  AMoAdNativeViewManager.getInstance(this).prepareAd(SID, TAG, true);

  View adView = AMoAdNativeViewManager.getInstance(this).createView(SID, TAG, R.layout.native_icon);

  ViewGroup vg = (ViewGroup) findViewById(R.id.top);
  vg.addView(adView);
}
```

.メイン画像+テキスト広告の実装
```java:MainActivity.java
@Override
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);

  AMoAdNativeViewManager.getInstance(this).prepareAd(SID, TAG, true, true);

  View adView = AMoAdNativeViewManager.getInstance(this).createView(SID, TAG, R.layout.native_image);

  ViewGroup vg = (ViewGroup) findViewById(R.id.top);
  vg.addView(adView);
}
```
=== 5.3.ネイティブ広告の更新

該当するSIDのTAGの広告が更新されます。

```java
AMoAdNativeViewManager.getInstance(context).updateAd(SID, TAG);
```

=== 5.4.ネイティブ広告のクリア

該当するSIDのTAGの広告がクリアされます。（テキストと画像が消える）

```java
AMoAdNativeViewManager.getInstance(context).clearAd(SID, TAG);
```

=== 5.5.ネイティブ広告の取得失敗を検知する

該当するSIDのTAGの広告の取得失敗を検知する。 +
createView関数、またはrenderAd関数に失敗検知リスナーを渡す。

```java
View view = AMoAdNativeViewManager.getInstance(context).createView(sid, tag, R.layout.template, new AMoAdNativeFailureListener() {
  @Override
  public void onFailure(String sid, String tag, View templateView) {
    // 広告の取得失敗を検知
  }
});
```

```java
AMoAdNativeViewManager.getInstance(context).renderAd(sid, tag, templateView, new AMoAdNativeFailureListener() {
  @Override
  public void onFailure(String sid, String tag, View templateView) {
    // 広告の取得失敗を検知
  }
});
```

=== 5.6.レイアウトファイルを作成しないで広告を表示する方法
renderAd関数にテンプレートビューを渡すと
テンプレートビューに広告が埋め込まれる。

[NOTE]
5.1.広告用のレイアウト作成の代わりにactivity_main.xmlの中に +
テンプレートに当てはまるビューを作成する必要があります。 +
詳しい内容は提供したサンプルアプリを参考してください。


```java
@Override
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);

  AMoAdNativeViewManager.getInstance(this).prepareAd(SID, TAG, true, true);

  View templateView = findByViewId(R.id.templeteView);

  AMoAdNativeViewManager.getInstance(this).renderAd(SID, TAG, templateView);
}
```

=== 6.デバッグ方法

.ログをコンソールに出力する
```java
AMoAdLogger.getInstance().setEnabled(true);
```

.SDKログをキャッチする
```java
AMoAdLogger.getInstance().setEnabled(true);
AMoAdLogger.getInstance().addAMoAdLoggerListener(new AMoAdLoggerListener() {
 @Override
    public void onLog(int level, String tag, String msg, Throwable throwable) {
        // ログをキャッチする
    }
});

```
